generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int       @id @default(autoincrement())
  email                  String    @unique
  name                   String
  password               String?
  google                 Google?
  github                 GitHub?
  projects               Project[]
  createdAt              DateTime  @default(now())
  hasCompletedOnboarding Boolean   @default(false)
}

model Google {
  id        Int      @id @default(autoincrement())
  googleId  String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
}

model GitHub {
  id        Int      @id @default(autoincrement())
  githubId  Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  apiUrl    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  logs      Log[]
  events    Event[]
  createdAt DateTime @default(now())
}

model Log {
  id              Int       @id @default(autoincrement())
  uuid            String    @unique @default(uuid())
  createdAt       DateTime  @default(now())
  date            String
  endpoint        String
  url             String
  ip              String
  statusCode      Int
  userAgent       String
  method          String
  requestTime     DateTime
  responseTime    DateTime?
  elapsedDuration Int?
  country         String    @default("Unknown")
  city            String    @default("Unknown")
  stateOrRegion   String    @default("Unknown")
  os              String    @default("Unknown")
  device          String    @default("Unknown")
  deviceType      String    @default("Unknown")
  browser         String    @default("Unknown")
  requestHeaders  String
  responseHeaders String?
  responseBody    String?
  requestBody     String
  project         Project   @relation(fields: [projectId], references: [id])
  projectId       Int
}

model APiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  projectId Int
  createdAt DateTime @default(now())
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @db.Text
  expires_in DateTime
  userId     Int      @unique
  createdAt  DateTime @default(now())
}

model Event {
  id             Int       @id @default(autoincrement())
  name           String
  createdAt      DateTime  @default(now())
  projectId      Int
  project        Project   @relation(fields: [projectId], references: [id])
  action         String
  conditions     Json[]
  lastTriggered  DateTime?
  timesTriggered Int?      @default(0)
}
